openapi: 3.0.0
info:
  title: Supply Chain Threat Analysis Dashboard API
  description: API providing basic functionalities of the Threddi (preliminary name)
    BMW Supply Chain Threat Analysis Dashboard
  termsOfService: https://foo.com/terms-of-use
  contact:
    name: Bernhard
    url: foo.com
    email: bernhard@foo.com
  license:
    name: BMW License
    url: http://foo.com/dashboard
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/ElHong/Supply_Chain_Threat_Analysis_Dashboard_API/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://de.foo.com/v1
  description: Dev Server
- url: https://de.foo.com/v2
  description: Prod Server
tags:
- name: event
  description: Access to event objects
  externalDocs:
    description: Find out more
    url: https://www.gdeltproject.org/data.html#documentation
- name: location
  description: Access to object locations
- name: GDELT_event
  description: Access to GDELT event objects
  externalDocs:
    description: Find out more
    url: https://www.gdeltproject.org/data.html#documentation
- name: Twitter_event
  description: Access to Twitter event objects
  externalDocs:
    description: Find out more
    url: https://developer.twitter.com/en/docs/tweets/timelines/overview
paths:
  /events:
    summary: Event object type
    description: This resource represents an individual event in the system. Each
      event is identified by an unique event_id.
    get:
      tags:
      - event
      summary: Return array with event information.
      description: Obtain information about ongoing events.
      operationId: getEvent
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/General_event'
        400:
          description: Invalid request
          content: {}
  /events/{eventId}:
    summary: Tbd
    description: Tbd
    get:
      tags:
      - event
      summary: Return event by event_id.
      description: Obtain information about a specific event by stating the event_id.
      operationId: getEventById
      parameters:
      - name: eventId
        in: path
        description: ID of event that needs to be fetched
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/General_event'
        400:
          description: Invalid request
          content: {}
        404:
          description: ID not found
          content: {}
    delete:
      tags:
      - event
      summary: Delete event by ID
      operationId: deleteEventByID
      parameters:
      - name: eventId
        in: path
        description: Event_id of the location that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
        400:
          description: Invalid request
          content: {}
        404:
          description: ID not found
          content: {}
  /mainlocations:
    summary: Main location object type
    description: This resource represents an individual location object in the system.
      Each location is identified by an unique location_id.
    get:
      tags:
      - location
      summary: Return array with all location information.
      description: Obtain information about all location objects stored in the database.
      operationId: getLocations
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/mainlocations'
        400:
          description: Invalid request
          content: {}
    post:
      tags:
      - location
      summary: Add a new location to the database
      operationId: postLocations
      requestBody:
        description: Location object that needs to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mainlocations'
        required: true
      responses:
        201:
          description: New resource created
        405:
          description: Invalid input
          content: {}
  /mainlocations/{location_id}:
    put:
      tags:
      - location
      summary: Update a existing location by ID
      description: This can only be done by the logged in user.
      operationId: updateLocationByID
      parameters:
      - name: location_id
        in: path
        description: Location_id that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Location_id of the location that need to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mainlocations'
        required: true
      responses:
        200:
          description: Successful operation
        201:
          description: New resource created
        400:
          description: Invalid request
          content: {}
        404:
          description: ID not found
          content: {}
        405:
          description: Validation exception
          content: {}
    delete:
      tags:
      - location
      summary: Delete location by ID
      operationId: deleteLocationByID
      parameters:
      - name: location_id
        in: path
        description: Location_id of the location that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successful operation
        400:
          description: Invalid request
          content: {}
        404:
          description: ID not found
          content: {}
  /GDELT_events:
    summary: GDELT event object type
    description: This resource represents an individual GDELT event object in the
      system. Each event is identified by an unique GLOBELEVENTID.
    get:
      tags:
      - GDELT_event
      summary: Return array with all GDELT event information.
      description: Obtain information about all GDELT event objects stored in the
        database.
      operationId: getGDELTEvents
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GDELT_event'
        400:
          description: Invalid request
          content: {}
  /GDELT_events/{GLOBALEVENTID}:
    delete:
      tags:
      - GDELT_event
      summary: Delete GDELT event by ID
      operationId: deleteGDELTEventByID
      parameters:
      - name: GLOBALEVENTID
        in: path
        description: GlobalEventID of the GDELT event that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: successful operation
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ID not found
          content: {}
  /Twitter_events:
    summary: Twitter event object type
    description: This resource represents an individual Twitter event object in the
      system.
    get:
      tags:
      - Twitter_event
      summary: Return array with all Twitter event information.
      description: Obtain information about all Twitter event objects stored in the
        database.
      operationId: getTwitterEvents
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Twitter_event'
        400:
          description: Invalid request
          content: {}
  /Twitter_events/{tweet_id}:
    delete:
      tags:
      - Twitter_event
      summary: Delete GDELT event by ID
      operationId: deleteTwitterEventByID
      parameters:
      - name: tweet_id
        in: path
        description: GlobalEventID of the GDELT event that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        200:
          description: Successful operation
        400:
          description: Invalid request
          content: {}
        404:
          description: ID not found
          content: {}
components:
  schemas:
    General_event:
      type: object
      properties:
        event_id:
          type: string
        sentiment_group:
          maximum: 2
          minimum: -2
          type: integer
        lat:
          type: string
        long:
          type: string
        url:
          type: string
        description:
          type: string
        importance:
          type: number
          format: float
        origin:
          type: string
        Actor:
          $ref: '#/components/schemas/General_event_Actor'
    GDELT_event:
      type: object
      properties:
        GLOBALEVENTID:
          type: string
        event_code:
          type: string
        event_baseCode:
          type: string
        quad_class:
          maximum: 4
          minimum: 1
          type: integer
        goldstein_scale:
          maximum: 10
          minimum: -10
          type: integer
        avg_tone:
          maximum: 100
          minimum: -100
          type: integer
        nummentions:
          type: integer
        numsources:
          type: integer
        numarticles:
          type: integer
    Twitter_event:
      type: object
      properties:
        tweet_id:
          type: string
        publishdate:
          type: string
          format: datetime
        text:
          type: string
        hastags:
          type: array
          items:
            type: string
        poster:
          type: string
        likes:
          type: integer
          format: int64
        count_retweets:
          type: integer
          format: int64
        follower_poster:
          type: integer
          format: int64
        is_influencer:
          type: boolean
    mainlocations:
      type: object
      properties:
        location_id:
          type: string
        lat:
          type: string
        long:
          type: string
        description:
          type: string
        location_type:
          type: string
        image_url:
          type: string
        priority:
          maximum: 10
          minimum: 0
          type: integer
          format: int32
        additional_information:
          type: array
          items:
            type: string
    historical_events:
      type: object
      properties:
        location_id:
          type: string
        day:
          type: string
          format: datetime
        event_count:
          type: integer
          format: int64
    General_event_Actor:
      type: object
      properties:
        actor_id:
          type: string
        actor_name:
          type: string
        actor_origin:
          type: string
        actor_group:
          type: string
        actor_type:
          type: array
          items:
            type: string
